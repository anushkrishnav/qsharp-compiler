<#@ template language="C#" linePragmas="false" #>
<#@ import namespace="Microsoft.Quantum.QsCompiler.BondSchemas.EntryPoint" #>
//------------------------------------------------------------------------------
// This code was generated by a tool.
// <auto-generated />
//------------------------------------------------------------------------------
//
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

#include <fstream>
#include <iostream>
#include <map>
#include <memory>
#include <vector>

#include "CLI11.hpp"

#include "QirContext.hpp"
#include "QirRuntime.hpp"
#include "SimFactory.hpp"

using namespace Microsoft::Quantum;
using namespace std;
    
<# if (entryPointOperation.ContainsArgumentType(DataType.ArrayType)) { #>
struct InteropArray
{
    int64_t Size;
    void* Data;

    InteropArray(int64_t size, void* data) :
        Size(size),
        Data(data){}
};
<# } #>


<# if (entryPointOperation.ContainsArgumentType(DataType.RangeType)) { #>
using RangeTuple = tuple<int64_t, int64_t, int64_t>;
struct InteropRange
{
    int64_t Start;
    int64_t Step;
    int64_t End;

    InteropRange() :
        Start(0),
        Step(0),
        End(0){}

    InteropRange(RangeTuple rangeTuple) :
        Start(get<0>(rangeTuple)),
        Step(get<1>(rangeTuple)),
        End(get<2>(rangeTuple)){}
};
<# } #>

// This is the function corresponding to the QIR entry-point.
extern "C" void <#= entryPointOperation.Name #>( // NOLINT
<# for (int i = 0; i < entryPointOperation.InteropArguments.Count; i++) {
    var arg = entryPointOperation.InteropArguments[i];
    Write($"    {arg.CppType()} {arg.Name}");
    if (i < entryPointOperation.InteropArguments.Count-1) {
        WriteLine(",");
    }
} #>

);

const char InteropFalseAsChar = 0x0;
const char InteropTrueAsChar = 0x1;
map<string, bool> BoolAsCharMap{
    {"0", InteropFalseAsChar},
    {"false", InteropFalseAsChar},
    {"1", InteropTrueAsChar},
    {"true", InteropTrueAsChar}};

map<string, PauliId> PauliMap{
    {"PauliI", PauliId::PauliId_I},
    {"PauliX", PauliId::PauliId_X},
    {"PauliY", PauliId::PauliId_Y},
    {"PauliZ", PauliId::PauliId_Z}};

const char InteropResultZeroAsChar = 0x0;
const char InteropResultOneAsChar = 0x1;
map<string, char> ResultAsCharMap{
    {"0", InteropResultZeroAsChar},
    {"Zero", InteropResultZeroAsChar},
    {"1", InteropResultOneAsChar},
    {"One", InteropResultOneAsChar}
};

template<typename T>
unique_ptr<InteropArray> CreateInteropArray(vector<T>& v)
{
    unique_ptr<InteropArray> array(new InteropArray(v.size(), v.data()));
    return array;
}

unique_ptr<InteropRange> CreateInteropRange(RangeTuple rangeTuple)
{
    unique_ptr<InteropRange> range(new InteropRange(rangeTuple));
    return range;
}

template<typename T>
void FreePointerVector(vector<T*>& v)
{
    for (auto p : v)
    {
        delete p;
    }
}

char TranslatePauliToChar(PauliId& pauli)
{
    return static_cast<char>(pauli);
}

template<typename S, typename D>
void TranslateVector(vector<S>& sourceVector, vector<D>& destinationVector, function<D(S&)> translationFunction)
{
    destinationVector.resize(sourceVector.size());
    transform(sourceVector.begin(), sourceVector.end(), destinationVector.begin(), translationFunction);
}

InteropRange* TranslateRangeTupleToInteropRangePointer(RangeTuple& rangeTuple)
{
    InteropRange* range = new InteropRange(rangeTuple);
    return range;
}

const char* TranslateStringToCharBuffer(string& s)
{
    return s.c_str();
}

int main(int argc, char* argv[])
{
    CLI::App app("QIR Standalone Entry Point Inputs Reference");

    // Initialize simulator.
    unique_ptr<IRuntimeDriver> sim = CreateFullstateSimulator();
    QirContextScope qirctx(sim.get(), false /*trackAllocatedObjects*/);

    // Add the --simulation-output options.
    // N.B. This option should be present in all standalone drivers.
    string simulationOutputFile;
    CLI::Option* simulationOutputFileOpt = app.add_option(
        "--simulation-output", simulationOutputFile,
        "File where the output produced during the simulation is written");
    
<# foreach (var arg in entryPointOperation.InteropArguments) {
    WriteLine("");
    WriteLine($"    {arg.CppVarType()} {arg.Name};"); 
    if (arg.CppVarInitialValue() != null) { WriteLine($"    {arg.Name} = {arg.CppVarInitialValue()};"); }
    WriteLine($"    app.add_option(\"{arg.CliOptionString()}\", {arg.Name}, \"{arg.CliDescription()}\")");
    if (arg.TransformationType() == null) {
        WriteLine("        ->required();");
    } else {
        WriteLine($"        ->required()->transform(CLI::CheckedTransformer({arg.TransformationType()}, CLI::ignore_case));");
    }
} #>

    // With all the options added, parse arguments from the command line.
    CLI11_PARSE(app, argc, argv);

<# foreach (var arg in entryPointOperation.InteropArguments) {
    switch (arg.Type) {
        case DataType.PauliType:
            WriteLine("    // Translate a PauliID value to its char representation.");
            WriteLine($"    char {arg.Name}AsCharValue = TranslatePauliToChar({arg.Name});");
            break;
        case DataType.RangeType:
            WriteLine("    // Create an interop range.");
            WriteLine($"    unique_ptr<InteropRange> {arg.Name}Value = CreateInteropRange({arg.Name});");
            break;
        case DataType.ArrayType:
            switch (arg.ArrayType) {
                case DataType.IntegerType:
                    WriteLine("    // Translate values to its final form after parsing.");
                    WriteLine("    // Create an interop array of integer values.");
                    WriteLine($"    unique_ptr<InteropArray> {arg.Name}Array = CreateInteropArray({arg.Name});");
                    break;
                case DataType.DoubleType:
                    WriteLine("    // Create an interop array of double values.");
                    WriteLine($"    unique_ptr<InteropArray> {arg.Name}Array = CreateInteropArray({arg.Name});");
                    break;
                case DataType.BoolType:
                    WriteLine("    // Create an interop array of bool values.");
                    WriteLine($"    unique_ptr<InteropArray> {arg.Name}Array = CreateInteropArray({arg.Name});");
                    break;
                case DataType.PauliType:
                    WriteLine("    // Create an interop array of Pauli values represented as chars.");
                    WriteLine($"    vector<char> {arg.Name}AsCharVector;");
                    WriteLine($"    TranslateVector<PauliId, char>({arg.Name}, {arg.Name}AsCharVector, TranslatePauliToChar);");
                    WriteLine($"    unique_ptr<InteropArray> {arg.Name}Array = CreateInteropArray({arg.Name}AsCharVector);");
                    break;
                case DataType.RangeType:
                    WriteLine($"    vector<InteropRange*> {arg.Name}Vector;");
                    WriteLine($"    TranslateVector<RangeTuple, InteropRange*>({arg.Name}, {arg.Name}Vector, TranslateRangeTupleToInteropRangePointer);");
                    WriteLine($"    unique_ptr<InteropArray> {arg.Name}Array = CreateInteropArray({arg.Name}Vector);");
                    break;
                case DataType.ResultType:
                    WriteLine("    // Create an interop array of Result values.");
                    WriteLine($"    unique_ptr<InteropArray> {arg.Name}Array = CreateInteropArray({arg.Name});");
                    break;
                case DataType.StringType:
                    WriteLine("    // Create an interop array of String values.");
                    WriteLine($"    vector<const char *> {arg.Name}BufferVector;");
                    WriteLine($"    TranslateVector<string, const char*>({arg.Name}, {arg.Name}BufferVector, TranslateStringToCharBuffer);");
                    WriteLine($"    unique_ptr<InteropArray> {arg.Name}Array = CreateInteropArray({arg.Name}BufferVector);");
                    break;
            }
            break;
    }
} #>
    // Redirect the simulator output from std::cout if the --simulation-output option is present.
    ostream* simulatorOutputStream = &cout;
    ofstream simulationOutputFileStream;
    if (!simulationOutputFileOpt->empty())
    {
        simulationOutputFileStream.open(simulationOutputFile);
        SetOutputStream(simulationOutputFileStream);
        simulatorOutputStream = &simulationOutputFileStream;
    }

    // Run simulation and write the output of the operation to the corresponding stream.
    <#= entryPointOperation.Name #>(
<# for (int i = 0; i < entryPointOperation.InteropArguments.Count; i++) {
    var arg = entryPointOperation.InteropArguments[i];
    switch (arg.Type) {
        case DataType.PauliType:
            Write($"        {arg.Name}AsCharValue");
            break;
        case DataType.RangeType:
            Write($"        {arg.Name}Value");
            break;
        case DataType.StringType:
            Write($"        {arg.Name}.c_str()");
            break;
        case DataType.ArrayType:
            Write($"        {arg.Name}Array.get()");
            break;
        default:
            Write($"        {arg.Name}");
            break;
    }
    if (i < entryPointOperation.InteropArguments.Count-1 ) {
        WriteLine(",");
    }
} #>

);

<# foreach (var arg in entryPointOperation.InteropArguments) {
    if (arg.Type == DataType.ArrayType && arg.Type == DataType.RangeType) {
        Write($"    FreePointerVector({arg.Name}Vector);");
    }
} #>

    simulatorOutputStream->flush();
    if (simulationOutputFileStream.is_open())
    {
        simulationOutputFileStream.close();
    }
}
