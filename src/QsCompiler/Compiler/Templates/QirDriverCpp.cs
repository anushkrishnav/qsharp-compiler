// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Microsoft.Quantum.QsCompiler.Templates
{
    using Microsoft.Quantum.QsCompiler.BondSchemas.EntryPoint;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class QirDriverCpp : QirDriverCppBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"//------------------------------------------------------------------------------
// This code was generated by a tool.
// <auto-generated />
//------------------------------------------------------------------------------
//
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

#include <fstream>
#include <iostream>
#include <map>
#include <memory>
#include <vector>

#include ""CLI11.hpp""

#include ""QirContext.hpp""
#include ""QirRuntime.hpp""
#include ""SimFactory.hpp""

using namespace Microsoft::Quantum;
using namespace std;
    
");
            
            #line 26 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
 if (CppInterop.ContainsArgumentType(entryPointOperation, DataType.ArrayType)) { 
            
            #line default
            #line hidden
            this.Write("struct InteropArray\r\n{\r\n    int64_t Size;\r\n    void* Data;\r\n\r\n    InteropArray(in" +
                    "t64_t size, void* data) :\r\n        Size(size),\r\n        Data(data){}\r\n};\r\n");
            
            #line 36 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\r\n");
            
            #line 39 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
 if (CppInterop.ContainsArgumentType(entryPointOperation, DataType.RangeType)) { 
            
            #line default
            #line hidden
            this.Write(@"using RangeTuple = tuple<int64_t, int64_t, int64_t>;
struct InteropRange
{
    int64_t Start;
    int64_t Step;
    int64_t End;

    InteropRange() :
        Start(0),
        Step(0),
        End(0){}

    InteropRange(RangeTuple rangeTuple) :
        Start(get<0>(rangeTuple)),
        Step(get<1>(rangeTuple)),
        End(get<2>(rangeTuple)){}
};
");
            
            #line 57 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n// This is the function corresponding to the QIR entry-point.\r\nextern \"C\" void " +
                    "");
            
            #line 60 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entryPointOperation.Name));
            
            #line default
            #line hidden
            this.Write("( // NOLINT\r\n");
            
            #line 61 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
 for (int i = 0; i < CppInterop.GetSortedArguments(entryPointOperation).Count; i++) {
    var arg = CppInterop.GetSortedArguments(entryPointOperation)[i];
    Write($"    {CppInterop.CppType(arg)} {arg.Name}");
    if (i < CppInterop.GetSortedArguments(entryPointOperation).Count-1) {
        WriteLine(",");
    }
} 
            
            #line default
            #line hidden
            this.Write("\r\n);\r\n\r\nconst char InteropFalseAsChar = 0x0;\r\nconst char InteropTrueAsChar = 0x1;" +
                    "\r\nmap<string, bool> BoolAsCharMap{\r\n    {\"0\", InteropFalseAsChar},\r\n    {\"false\"" +
                    ", InteropFalseAsChar},\r\n    {\"1\", InteropTrueAsChar},\r\n    {\"true\", InteropTrueA" +
                    "sChar}};\r\n\r\nmap<string, PauliId> PauliMap{\r\n    {\"PauliI\", PauliId::PauliId_I},\r" +
                    "\n    {\"PauliX\", PauliId::PauliId_X},\r\n    {\"PauliY\", PauliId::PauliId_Y},\r\n    {" +
                    "\"PauliZ\", PauliId::PauliId_Z}};\r\n\r\nconst char InteropResultZeroAsChar = 0x0;\r\nco" +
                    "nst char InteropResultOneAsChar = 0x1;\r\nmap<string, char> ResultAsCharMap{\r\n    " +
                    "{\"0\", InteropResultZeroAsChar},\r\n    {\"Zero\", InteropResultZeroAsChar},\r\n    {\"1" +
                    "\", InteropResultOneAsChar},\r\n    {\"One\", InteropResultOneAsChar}\r\n};\r\n\r\ntemplate" +
                    "<typename T>\r\nunique_ptr<InteropArray> CreateInteropArray(vector<T>& v)\r\n{\r\n    " +
                    "unique_ptr<InteropArray> array(new InteropArray(v.size(), v.data()));\r\n    retur" +
                    "n array;\r\n}\r\n\r\nunique_ptr<InteropRange> CreateInteropRange(RangeTuple rangeTuple" +
                    ")\r\n{\r\n    unique_ptr<InteropRange> range(new InteropRange(rangeTuple));\r\n    ret" +
                    "urn range;\r\n}\r\n\r\ntemplate<typename T>\r\nvoid FreePointerVector(vector<T*>& v)\r\n{\r" +
                    "\n    for (auto p : v)\r\n    {\r\n        delete p;\r\n    }\r\n}\r\n\r\nchar TranslatePauli" +
                    "ToChar(PauliId& pauli)\r\n{\r\n    return static_cast<char>(pauli);\r\n}\r\n\r\ntemplate<t" +
                    "ypename S, typename D>\r\nvoid TranslateVector(vector<S>& sourceVector, vector<D>&" +
                    " destinationVector, function<D(S&)> translationFunction)\r\n{\r\n    destinationVect" +
                    "or.resize(sourceVector.size());\r\n    transform(sourceVector.begin(), sourceVecto" +
                    "r.end(), destinationVector.begin(), translationFunction);\r\n}\r\n\r\nInteropRange* Tr" +
                    "anslateRangeTupleToInteropRangePointer(RangeTuple& rangeTuple)\r\n{\r\n    InteropRa" +
                    "nge* range = new InteropRange(rangeTuple);\r\n    return range;\r\n}\r\n\r\nconst char* " +
                    "TranslateStringToCharBuffer(string& s)\r\n{\r\n    return s.c_str();\r\n}\r\n\r\nint main(" +
                    "int argc, char* argv[])\r\n{\r\n    CLI::App app(\"QIR Standalone Entry Point Inputs " +
                    "Reference\");\r\n\r\n    // Initialize simulator.\r\n    unique_ptr<IRuntimeDriver> sim" +
                    " = CreateFullstateSimulator();\r\n    QirContextScope qirctx(sim.get(), false /*tr" +
                    "ackAllocatedObjects*/);\r\n\r\n    // Add the --simulation-output options.\r\n    // N" +
                    ".B. This option should be present in all standalone drivers.\r\n    string simulat" +
                    "ionOutputFile;\r\n    CLI::Option* simulationOutputFileOpt = app.add_option(\r\n    " +
                    "    \"--simulation-output\", simulationOutputFile,\r\n        \"File where the output" +
                    " produced during the simulation is written\");\r\n    \r\n");
            
            #line 154 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
 foreach (var arg in CppInterop.GetSortedArguments(entryPointOperation)) {
    WriteLine("");
    WriteLine($"    {CppInterop.CppVarType(arg)} {arg.Name};"); 
    if (CppInterop.CppVarInitialValue(arg) != null) { WriteLine($"    {arg.Name} = {CppInterop.CppVarInitialValue(arg)};"); }
    WriteLine($"    app.add_option(\"{CppInterop.CliOptionString(arg)}\", {arg.Name}, \"{CppInterop.CliDescription(arg)}\")");
    if (CppInterop.TransformationType(arg) == null) {
        WriteLine("        ->required();");
    } else {
        WriteLine($"        ->required()->transform(CLI::CheckedTransformer({CppInterop.TransformationType(arg)}, CLI::ignore_case));");
    }
} 
            
            #line default
            #line hidden
            this.Write("\r\n    // With all the options added, parse arguments from the command line.\r\n    " +
                    "CLI11_PARSE(app, argc, argv);\r\n\r\n");
            
            #line 169 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
 foreach (var arg in CppInterop.GetSortedArguments(entryPointOperation)) {
    switch (arg.Type) {
        case DataType.PauliType:
            WriteLine("    // Translate a PauliID value to its char representation.");
            WriteLine($"    char {arg.Name}AsCharValue = TranslatePauliToChar({arg.Name});");
            break;
        case DataType.RangeType:
            WriteLine("    // Create an interop range.");
            WriteLine($"    unique_ptr<InteropRange> {arg.Name}Value = CreateInteropRange({arg.Name});");
            break;
        case DataType.ArrayType:
            switch (arg.ArrayType) {
                case DataType.IntegerType:
                    WriteLine("    // Translate values to its final form after parsing.");
                    WriteLine("    // Create an interop array of integer values.");
                    WriteLine($"    unique_ptr<InteropArray> {arg.Name}Array = CreateInteropArray({arg.Name});");
                    break;
                case DataType.DoubleType:
                    WriteLine("    // Create an interop array of double values.");
                    WriteLine($"    unique_ptr<InteropArray> {arg.Name}Array = CreateInteropArray({arg.Name});");
                    break;
                case DataType.BoolType:
                    WriteLine("    // Create an interop array of bool values.");
                    WriteLine($"    unique_ptr<InteropArray> {arg.Name}Array = CreateInteropArray({arg.Name});");
                    break;
                case DataType.PauliType:
                    WriteLine("    // Create an interop array of Pauli values represented as chars.");
                    WriteLine($"    vector<char> {arg.Name}AsCharVector;");
                    WriteLine($"    TranslateVector<PauliId, char>({arg.Name}, {arg.Name}AsCharVector, TranslatePauliToChar);");
                    WriteLine($"    unique_ptr<InteropArray> {arg.Name}Array = CreateInteropArray({arg.Name}AsCharVector);");
                    break;
                case DataType.RangeType:
                    WriteLine($"    vector<InteropRange*> {arg.Name}Vector;");
                    WriteLine($"    TranslateVector<RangeTuple, InteropRange*>({arg.Name}, {arg.Name}Vector, TranslateRangeTupleToInteropRangePointer);");
                    WriteLine($"    unique_ptr<InteropArray> {arg.Name}Array = CreateInteropArray({arg.Name}Vector);");
                    break;
                case DataType.ResultType:
                    WriteLine("    // Create an interop array of Result values.");
                    WriteLine($"    unique_ptr<InteropArray> {arg.Name}Array = CreateInteropArray({arg.Name});");
                    break;
                case DataType.StringType:
                    WriteLine("    // Create an interop array of String values.");
                    WriteLine($"    vector<const char *> {arg.Name}BufferVector;");
                    WriteLine($"    TranslateVector<string, const char*>({arg.Name}, {arg.Name}BufferVector, TranslateStringToCharBuffer);");
                    WriteLine($"    unique_ptr<InteropArray> {arg.Name}Array = CreateInteropArray({arg.Name}BufferVector);");
                    break;
            }
            break;
    }
} 
            
            #line default
            #line hidden
            this.Write(@"    // Redirect the simulator output from std::cout if the --simulation-output option is present.
    ostream* simulatorOutputStream = &cout;
    ofstream simulationOutputFileStream;
    if (!simulationOutputFileOpt->empty())
    {
        simulationOutputFileStream.open(simulationOutputFile);
        SetOutputStream(simulationOutputFileStream);
        simulatorOutputStream = &simulationOutputFileStream;
    }

    // Run simulation and write the output of the operation to the corresponding stream.
    ");
            
            #line 230 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entryPointOperation.Name));
            
            #line default
            #line hidden
            this.Write("(\r\n");
            
            #line 231 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
 for (int i = 0; i < CppInterop.GetSortedArguments(entryPointOperation).Count; i++) {
    var arg = CppInterop.GetSortedArguments(entryPointOperation)[i];
    switch (arg.Type) {
        case DataType.PauliType:
            Write($"        {arg.Name}AsCharValue");
            break;
        case DataType.RangeType:
            Write($"        {arg.Name}Value");
            break;
        case DataType.StringType:
            Write($"        {arg.Name}.c_str()");
            break;
        case DataType.ArrayType:
            Write($"        {arg.Name}Array.get()");
            break;
        default:
            Write($"        {arg.Name}");
            break;
    }
    if (i < CppInterop.GetSortedArguments(entryPointOperation).Count-1 ) {
        WriteLine(",");
    }
} 
            
            #line default
            #line hidden
            this.Write("\r\n);\r\n\r\n");
            
            #line 257 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
 foreach (var arg in CppInterop.GetSortedArguments(entryPointOperation)) {
    if (arg.Type == DataType.ArrayType && arg.Type == DataType.RangeType) {
        Write($"    FreePointerVector({arg.Name}Vector);");
    }
} 
            
            #line default
            #line hidden
            this.Write("\r\n    simulatorOutputStream->flush();\r\n    if (simulationOutputFileStream.is_open" +
                    "())\r\n    {\r\n        simulationOutputFileStream.close();\r\n    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class QirDriverCppBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
